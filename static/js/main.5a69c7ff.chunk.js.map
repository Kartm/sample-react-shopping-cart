{"version":3,"sources":["features/shop/shopSlice.ts","components/CartItem/CartItem.tsx","features/cart/Cart.tsx","components/ProductItem/ProductItem.tsx","features/products/Products.tsx","features/shop/Shop.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["shopSlice","createSlice","name","initialState","cartItemIds","reducers","addCartItem","state","action","push","payload","removeCartItem","filter","id","actions","selectShopProducts","dataJson","selectCartItems","data","shop","lodashMap","countBy","count","item","find","amount","CartItem","onRemove","itemTotalPrice","round","price","itemDescription","title","toFixed","currency","className","src","cover","onClick","Cart","items","useSelector","dispatch","useDispatch","totalPrice","reduce","accum","length","map","ProductItem","onAdd","availability","Products","products","Shop","App","store","configureStore","reducer","shopReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a69c7ff.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport IProduct, { IProductGroup } from \"../../models/product.interface\";\nimport countBy from \"lodash/countBy\";\nimport lodashMap from \"lodash/map\";\nimport dataJson from \"../../items.json\";\n\ninterface ShopState {\n  cartItemIds: number[];\n}\n\nconst initialState: ShopState = { cartItemIds: [] };\n\nexport const shopSlice = createSlice({\n  name: \"shop\",\n  initialState,\n  reducers: {\n    addCartItem(state, action: PayloadAction<number>) {\n      state.cartItemIds.push(action.payload);\n    },\n    removeCartItem(state, action: PayloadAction<number>) {\n      state.cartItemIds = state.cartItemIds.filter(\n        (id) => id !== action.payload\n      );\n    },\n  },\n});\n\nexport const { addCartItem, removeCartItem } = shopSlice.actions;\n\nexport const selectShopProducts = (state: RootState) => {\n  return dataJson as IProduct[];\n};\nexport const selectCartItems = (state: RootState) => {\n  const data = state.shop.cartItemIds;\n\n  return lodashMap(\n    countBy(data, (id) => id),\n    (count, id) => {\n      const item = dataJson.find((item) => item.id === +id);\n      return { ...item, amount: count } as IProductGroup;\n    }\n  );\n};\n// export const selectTotalPrice = (state: RootState) =>\n//   selectCartItems(state).reduce((accum, currentVal) => accum + currentVal.price, 0);\n\nexport default shopSlice.reducer;\n","import React from \"react\";\nimport \"./CartItem.scss\";\nimport { IProductGroup } from \"../../models/product.interface\";\nimport round from \"lodash/round\";\n\ntype CartItemProps = {\n  item: IProductGroup;\n  onRemove: () => void;\n};\n\nexport function CartItem({ item, onRemove }: CartItemProps) {\n  const itemTotalPrice = round(item.amount * item.price, 2);\n  const itemDescription = `${item.title}, ${\n    item.amount\n  } pcs., ${item.price.toFixed(2)} ${item.currency}, ${itemTotalPrice.toFixed(\n    2\n  )} ${item.currency}`;\n\n  return (\n    <div className=\"cart-item\">\n      <img src={item.cover} />\n      <div className=\"description\">\n        <p>{itemDescription}</p>\n        <button className=\"remove\" onClick={() => onRemove()}>\n          ‚ùå\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./Cart.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { removeCartItem, selectCartItems } from \"../shop/shopSlice\";\nimport round from \"lodash/round\";\nimport { CartItem } from \"../../components/CartItem/CartItem\";\n\nexport function Cart() {\n  const items = useSelector(selectCartItems);\n  const dispatch = useDispatch();\n\n  const totalPrice = round(\n    items.reduce((accum, item) => accum + item.amount * item.price, 0),\n    2\n  );\n\n  return (\n    <div className=\"cart\">\n      <h1 className=\"header\">Cart</h1>\n      {items.length > 0 ? (\n        <>\n          <div className=\"container\">\n            {items.map((item) => (\n              <CartItem\n                item={item}\n                onRemove={() => dispatch(removeCartItem(item.id))}\n              />\n            ))}\n          </div>\n          <div className=\"total\">\n            <h3>{`Total ${totalPrice} PLN`}</h3>\n          </div>\n        </>\n      ) : (\n        <h2 className=\"empty\">{\"Cart is empty\"}</h2>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./ProductItem.scss\";\nimport IProduct from \"../../models/product.interface\";\n\ntype ProductItemProps = {\n  item: IProduct;\n  onAdd: () => void;\n};\n\nexport function ProductItem({ item, onAdd }: ProductItemProps) {\n  return (\n    <div className=\"product-item\">\n      <img src={item.cover} />\n      <div className=\"description\">\n        <p>{item.title}</p>\n        {item.availability && <p>{`${item.price.toFixed(2)} ${item.currency}`}</p>}\n        {item.availability && (\n          <button className=\"add\" onClick={() => onAdd()}>\n            {\"Add to cart\"}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./Products.scss\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addCartItem, selectShopProducts } from \"../shop/shopSlice\";\nimport { ProductItem } from \"../../components/ProductItem/ProductItem\";\n\nexport function Products() {\n  const products = useSelector(selectShopProducts);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"products\">\n      <h1 className=\"header\">Products</h1>\n      <div className=\"container\">\n        {products.map((item) => (\n          <ProductItem\n            item={item}\n            onAdd={() => dispatch(addCartItem(item.id))}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Cart } from \"../cart/Cart\";\nimport { Products } from \"../products/Products\";\nimport \"./Shop.scss\";\n\nexport function Shop() {\n  return (\n    <div className=\"shop\">\n      <Products />\n      <Cart />\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { Shop } from './features/shop/Shop';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Shop/>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport shopReducer from \"../features/shop/shopSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    shop: shopReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}